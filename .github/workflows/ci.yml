name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  BRANCH: chromium/6533
  COMMIT: 108a8f8

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { target: aarch64-apple-darwin, os: macos-14 }
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
    runs-on: ${{ matrix.platform.os }}
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0

    steps:
      - uses: actions/checkout@v4
      - name: Install Depot Tools
        uses: newkdev/setup-depot-tools@v1.0.1
      - run: |
          git clone --depth=2 -b ${{ env.BRANCH }} https://chromium.googlesource.com/angle/angle
          cp .gclient angle/.gclient
          cd angle
          git checkout ${{ env.COMMIT }}
          gclient sync --no-history
      - run: gn gen out/Release --args='is_debug=false angle_build_all=false angle_build_tests=false angle_enable_null=false angle_enable_wgpu=false angle_enable_swiftshader=false angle_enable_vulkan=false use_custom_libcxx=false angle_has_frame_capture=false angle_enable_abseil=false'
        working-directory: angle
      - run: autoninja -C out/Release
        working-directory: angle
      - name: Package windows
        if: ${{ contains(matrix.platform.os, 'windows') }}
        working-directory: angle/out/Release
        run: |
          7z a ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}-dynamic.zip libEGL.dll libGLESv2.dll
          7z a ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}-static.zip libEGL.dll.lib libGLESv2.dll.lib
      - name: Package linux
        if: ${{ contains(matrix.platform.os, 'ubuntu') }}
        working-directory: angle/out/Release
        run: |
          zip ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}.zip libEGL.so libGLESv2.so
      - name: Package mac
        if: ${{ contains(matrix.platform.os, 'mac') }}
        working-directory: angle/out/Release
        run: |
          zip ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}.zip libEGL.dylib libGLESv2.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}
          path: angle/out/Release/ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}*
      - uses: actions/upload-artifact@v4
        with:
          name: all-ANGLE-${{ env.COMMIT }}-${{ matrix.platform.target }}
          path: |
            ${{ contains(matrix.platform.os, 'windows') && 'angle/out/Release/*.dll' || '' }}
            ${{ contains(matrix.platform.os, 'windows') && 'angle/out/Release/*.dll.*' || '' }}
            ${{ contains(matrix.platform.os, 'ubuntu') && 'angle/out/Release/*.so' || '' }}
            ${{ contains(matrix.platform.os, 'mac') && 'angle/out/Release/*.dylib' || '' }}

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: ANGLE-${{ env.COMMIT }}-*
          merge-multiple: true
      - name: Publish release if tag doesn't exist
        id: check-tag
        run: |
          RELEASE_TAG="angle-${{ env.COMMIT }}""
          git fetch --tags --quiet
          if ! git show-ref --tags --verify --quiet "refs/tags/${RELEASE_TAG}" ; then
            gh release create ${RELEASE_TAG} *.zip
          fi
          echo "RELEASE_TAG=${RELEASE_TAG}" >> ${GITHUB_OUTPUT}
    outputs:
      release-tag: ${{ steps.check-tag.outputs.RELEASE_TAG }}
